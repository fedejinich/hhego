package pasta_go

import (
	"fmt"
	"testing"
)

func TestBasicEncryptionDecryption(t *testing.T) {
	fmt.Printf("------------------ TestBasicEncryptionDecryption ------------------")

	secretKey := []uint64{
		0x07a30, 0x0cfe2, 0x03bbb, 0x06ab7, 0x0de0b, 0x0c36c, 0x01c39,
		0x019e0, 0x0e09c, 0x04441, 0x0c560, 0x00fd4, 0x0c611, 0x0a3fd,
		0x0d408, 0x01b17, 0x0fa02, 0x054ea, 0x0afeb, 0x0193b, 0x0b6fa,
		0x09e80, 0x0e253, 0x03f49, 0x0c8a5, 0x0c6a4, 0x0badf, 0x0bcfc,
		0x0ecbd, 0x06ccd, 0x04f10, 0x0f1d6, 0x07da9, 0x079bd, 0x08e84,
		0x0b774, 0x07435, 0x09206, 0x086d4, 0x070d4, 0x04383, 0x05d65,
		0x0b015, 0x058fe, 0x0f0d1, 0x0c700, 0x0dc40, 0x02cea, 0x096db,
		0x06c84, 0x008ef, 0x02abc, 0x03fdf, 0x0ddaf, 0x028c7, 0x0ded4,
		0x0bb88, 0x020cd, 0x075c3, 0x0caf7, 0x0a8ff, 0x0eadd, 0x01c02,
		0x083b1, 0x0a439, 0x0e2db, 0x09baa, 0x02c09, 0x0b5ba, 0x0c7f5,
		0x0161c, 0x0e94d, 0x0bf6f, 0x070f1, 0x0f574, 0x0784b, 0x08cdb,
		0x08529, 0x027c9, 0x010bc, 0x079ca, 0x01ff1, 0x0219a, 0x00130,
		0x0ff77, 0x012fb, 0x03ca6, 0x0d27d, 0x05747, 0x0fa91, 0x00766,
		0x04f27, 0x00254, 0x06e8d, 0x0e071, 0x0804e, 0x08b0e, 0x08e59,
		0x04cd8, 0x0485f, 0x0bde0, 0x03082, 0x01225, 0x01b5f, 0x0a83e,
		0x0794a, 0x05104, 0x09c19, 0x0fdcf, 0x036fe, 0x01e41, 0x00038,
		0x086e8, 0x07046, 0x02c07, 0x04953, 0x07869, 0x0e9c1, 0x0af86,
		0x0503a, 0x00f31, 0x0535c, 0x0c2cb, 0x073b9, 0x028e3, 0x03c2b,
		0x0cb90, 0x00c33, 0x08fe7, 0x068d3, 0x09a8c, 0x008e0, 0x09fe8,
		0x0f107, 0x038ec, 0x0b014, 0x007eb, 0x06335, 0x0afcc, 0x0d55c,
		0x0a816, 0x0fa07, 0x05864, 0x0dc8f, 0x07720, 0x0deef, 0x095db,
		0x07cbe, 0x0834e, 0x09adc, 0x0bab8, 0x0f8f7, 0x0b21a, 0x0ca98,
		0x01a6c, 0x07e4a, 0x04545, 0x078a7, 0x0ba53, 0x00040, 0x09bc5,
		0x0bc7a, 0x0401c, 0x00c30, 0x00000, 0x0318d, 0x02e95, 0x065ed,
		0x03749, 0x090b3, 0x01e23, 0x0be04, 0x0b612, 0x08c0c, 0x06ea3,
		0x08489, 0x0a52c, 0x0aded, 0x0fd13, 0x0bd31, 0x0c225, 0x032f5,
		0x06aac, 0x0a504, 0x0d07e, 0x0bb32, 0x08174, 0x0bd8b, 0x03454,
		0x04075, 0x06803, 0x03df5, 0x091a0, 0x0d481, 0x09f04, 0x05c54,
		0x0d54f, 0x00344, 0x09ffc, 0x00262, 0x01fbf, 0x0461c, 0x01985,
		0x05896, 0x0fedf, 0x097ce, 0x0b38d, 0x0492f, 0x03764, 0x041ad,
		0x02849, 0x0f927, 0x09268, 0x0bafd, 0x05727, 0x033bc, 0x03249,
		0x08921, 0x022da, 0x0b2dc, 0x0e42d, 0x055fa, 0x0a654, 0x073f0,
		0x08df1, 0x08149, 0x00d1b, 0x0ac47, 0x0f304, 0x03634, 0x0168b,
		0x00c59, 0x09f7d, 0x0596c, 0x0d164, 0x0dc49, 0x038ff, 0x0a495,
		0x07d5a, 0x02d4, 0x06c6c, 0x0ea76, 0x09af5, 0x0bea6, 0x08eea,
		0x0fbb6, 0x09e45, 0x0e9db, 0x0d106, 0x0e7fd, 0x04ddf, 0x08bb8,
		0x0a3a4, 0x03bcd, 0x036d9, 0x05acf}
	plaintext := []uint64{1, 2, 3}
	modulus := 65537

	pasta3 := NewPasta3(secretKey, uint64(modulus))

	fmt.Printf("encrypting plaintext %d\n", plaintext)

	ciphertext := pasta3.Encrypt(plaintext)

	fmt.Printf("decrypting ciphertext %d\n", ciphertext)

	decrypted := pasta3.Decrypt(ciphertext)

	fmt.Printf("decrypted ciphertext %d\n", decrypted)

	if !equalSlices(decrypted, plaintext) {
		t.Error("different plains")
	}

	fmt.Printf("plaintext encrypted/decrypted\n")
}

func TestDecryption(t *testing.T) {
	fmt.Printf("------------------ TestBasicEncryptionDecryption ------------------\n")

	secretKey := []uint64{0x07a30, 0x0cfe2, 0x03bbb, 0x06ab7, 0x0de0b, 0x0c36c, 0x01c39,
		0x019e0, 0x0e09c, 0x04441, 0x0c560, 0x00fd4, 0x0c611, 0x0a3fd,
		0x0d408, 0x01b17, 0x0fa02, 0x054ea, 0x0afeb, 0x0193b, 0x0b6fa,
		0x09e80, 0x0e253, 0x03f49, 0x0c8a5, 0x0c6a4, 0x0badf, 0x0bcfc,
		0x0ecbd, 0x06ccd, 0x04f10, 0x0f1d6, 0x07da9, 0x079bd, 0x08e84,
		0x0b774, 0x07435, 0x09206, 0x086d4, 0x070d4, 0x04383, 0x05d65,
		0x0b015, 0x058fe, 0x0f0d1, 0x0c700, 0x0dc40, 0x02cea, 0x096db,
		0x06c84, 0x008ef, 0x02abc, 0x03fdf, 0x0ddaf, 0x028c7, 0x0ded4,
		0x0bb88, 0x020cd, 0x075c3, 0x0caf7, 0x0a8ff, 0x0eadd, 0x01c02,
		0x083b1, 0x0a439, 0x0e2db, 0x09baa, 0x02c09, 0x0b5ba, 0x0c7f5,
		0x0161c, 0x0e94d, 0x0bf6f, 0x070f1, 0x0f574, 0x0784b, 0x08cdb,
		0x08529, 0x027c9, 0x010bc, 0x079ca, 0x01ff1, 0x0219a, 0x00130,
		0x0ff77, 0x012fb, 0x03ca6, 0x0d27d, 0x05747, 0x0fa91, 0x00766,
		0x04f27, 0x00254, 0x06e8d, 0x0e071, 0x0804e, 0x08b0e, 0x08e59,
		0x04cd8, 0x0485f, 0x0bde0, 0x03082, 0x01225, 0x01b5f, 0x0a83e,
		0x0794a, 0x05104, 0x09c19, 0x0fdcf, 0x036fe, 0x01e41, 0x00038,
		0x086e8, 0x07046, 0x02c07, 0x04953, 0x07869, 0x0e9c1, 0x0af86,
		0x0503a, 0x00f31, 0x0535c, 0x0c2cb, 0x073b9, 0x028e3, 0x03c2b,
		0x0cb90, 0x00c33, 0x08fe7, 0x068d3, 0x09a8c, 0x008e0, 0x09fe8,
		0x0f107, 0x038ec, 0x0b014, 0x007eb, 0x06335, 0x0afcc, 0x0d55c,
		0x0a816, 0x0fa07, 0x05864, 0x0dc8f, 0x07720, 0x0deef, 0x095db,
		0x07cbe, 0x0834e, 0x09adc, 0x0bab8, 0x0f8f7, 0x0b21a, 0x0ca98,
		0x01a6c, 0x07e4a, 0x04545, 0x078a7, 0x0ba53, 0x00040, 0x09bc5,
		0x0bc7a, 0x0401c, 0x00c30, 0x00000, 0x0318d, 0x02e95, 0x065ed,
		0x03749, 0x090b3, 0x01e23, 0x0be04, 0x0b612, 0x08c0c, 0x06ea3,
		0x08489, 0x0a52c, 0x0aded, 0x0fd13, 0x0bd31, 0x0c225, 0x032f5,
		0x06aac, 0x0a504, 0x0d07e, 0x0bb32, 0x08174, 0x0bd8b, 0x03454,
		0x04075, 0x06803, 0x03df5, 0x091a0, 0x0d481, 0x09f04, 0x05c54,
		0x0d54f, 0x00344, 0x09ffc, 0x00262, 0x01fbf, 0x0461c, 0x01985,
		0x05896, 0x0fedf, 0x097ce, 0x0b38d, 0x0492f, 0x03764, 0x041ad,
		0x02849, 0x0f927, 0x09268, 0x0bafd, 0x05727, 0x033bc, 0x03249,
		0x08921, 0x022da, 0x0b2dc, 0x0e42d, 0x055fa, 0x0a654, 0x073f0,
		0x08df1, 0x08149, 0x00d1b, 0x0ac47, 0x0f304, 0x03634, 0x0168b,
		0x00c59, 0x09f7d, 0x0596c, 0x0d164, 0x0dc49, 0x038ff, 0x0a495,
		0x07d5a, 0x02d4, 0x06c6c, 0x0ea76, 0x09af5, 0x0bea6, 0x08eea,
		0x0fbb6, 0x09e45, 0x0e9db, 0x0d106, 0x0e7fd, 0x04ddf, 0x08bb8,
		0x0a3a4, 0x03bcd, 0x036d9, 0x05acf}
	plaintext := []uint64{0x0a562, 0x0f020, 0x09ae9, 0x04070, 0x0ad24, 0x044e3, 0x09e05,
		0x00f43, 0x0e8be, 0x0890e, 0x0b1f0, 0x08ccb, 0x0a2e9, 0x0ffe9,
		0x0a3b5, 0x02d13, 0x09740, 0x05c4a, 0x03a94, 0x0a6b8, 0x0b31d,
		0x049f2, 0x05b59, 0x01f90, 0x0f3c2, 0x0948b, 0x0731f, 0x007b7,
		0x0c8a7, 0x0b204, 0x02053, 0x0bce5, 0x01f77, 0x067ee, 0x0d935,
		0x09cef, 0x0d72b, 0x0b8e2, 0x07501, 0x0c42f, 0x04e85, 0x062f0,
		0x07742, 0x076c8, 0x08f22, 0x01d4f, 0x0bec7, 0x09376, 0x08969,
		0x0dd32, 0x00180, 0x06e3d, 0x0459e, 0x02618, 0x0d37b, 0x06f51,
		0x081de, 0x0428e, 0x08f8e, 0x034de, 0x0089b, 0x00340, 0x04f2a,
		0x0a51b, 0x02b2e, 0x0857e, 0x0de50, 0x0a7eb, 0x0cae8, 0x0287f,
		0x0b9e9, 0x0bc45, 0x0ace7, 0x0d9b8, 0x083bd, 0x0e774, 0x0c4d4,
		0x0a5f3, 0x084a5, 0x006b0, 0x07f49, 0x04e5d, 0x0d5c6, 0x0d94f,
		0x09dd0, 0x0e6cf, 0x0a4f3, 0x0cb91, 0x03ec7, 0x039ce, 0x084e7,
		0x0cefe, 0x0f57a, 0x04c3d, 0x01e06, 0x05c1f, 0x044cf, 0x03226,
		0x062e1, 0x02310, 0x086f5, 0x0209d, 0x038d2, 0x03d98, 0x0376f,
		0x0f7e3, 0x0f7b3, 0x02eb8, 0x00210, 0x0d1d2, 0x09ea1, 0x002d6,
		0x01c71, 0x01eea, 0x007b1, 0x0df37, 0x0d01d, 0x06f53, 0x0957b,
		0x0479e, 0x0ecb6, 0x08c2a, 0x0e56d, 0x05026, 0x07ec2, 0x09f77,
		0x0824b, 0x07295}
	modulus := 65537
	expectedCiphertext := []uint64{0x01c4f, 0x0e3e4, 0x08fe2, 0x0d7db, 0x05594, 0x05c72, 0x0962a,
		0x02c3c, 0x0b3dd, 0x07975, 0x0928b, 0x01024, 0x0632e, 0x07702,
		0x05ca1, 0x08e2d, 0x09b4c, 0x00747, 0x0d484, 0x005ad, 0x0674c,
		0x07fd1, 0x00a34, 0x036c7, 0x014dc, 0x08b83, 0x000e7, 0x00097,
		0x03f69, 0x03e8b, 0x07d3b, 0x0de0a, 0x0bfa6, 0x0ac00, 0x0caea,
		0x08cb9, 0x0f1c5, 0x0812a, 0x04071, 0x0a573, 0x0ed1b, 0x0fe51,
		0x08be8, 0x030b3, 0x05493, 0x01d44, 0x0869c, 0x09376, 0x032bb,
		0x0ee24, 0x01b04, 0x01631, 0x0b71a, 0x0590c, 0x06418, 0x0fe7f,
		0x07678, 0x003b4, 0x0f9cb, 0x0ae4c, 0x04b63, 0x0dcd2, 0x04224,
		0x07849, 0x0cdf6, 0x0d4ee, 0x0a804, 0x0daf9, 0x09ef8, 0x004d7,
		0x0701a, 0x02467, 0x09a43, 0x00141, 0x0bb40, 0x0734d, 0x00932,
		0x00cd4, 0x09052, 0x0d760, 0x093bf, 0x0ee3f, 0x0d6bb, 0x09261,
		0x0b23d, 0x0c35d, 0x0131a, 0x0a773, 0x08098, 0x041fe, 0x04acb,
		0x061b2, 0x034e4, 0x0f36c, 0x0aa38, 0x09144, 0x00b40, 0x06f83,
		0x001c2, 0x095c0, 0x075e4, 0x0ddcd, 0x06d0d, 0x0e9fa, 0x0aeb9,
		0x0d277, 0x02c4b, 0x09d81, 0x0e805, 0x03830, 0x0f452, 0x0266a,
		0x04fc0, 0x0f505, 0x01f14, 0x09eea, 0x081d0, 0x0ca4f, 0x016d5,
		0x0f2fb, 0x0a3ed, 0x03868, 0x09ea1, 0x0c657, 0x0b8e3, 0x05663,
		0x07a04, 0x02e7b}

	pasta3 := NewPasta3(secretKey, uint64(modulus))

	fmt.Printf("decrypting ciphertext %d\n", expectedCiphertext)

	ciphertext := pasta3.Encrypt(plaintext)

	fmt.Printf("---- decrypting ciphertext ----\n")

	pasta3.Decrypt(ciphertext)

	fmt.Printf("---- decrypting expected ciphertext ----\n")

	decryptedFromExpected := pasta3.Decrypt(expectedCiphertext)

	fmt.Printf("decryptedFromExpected ciphertext %d\n", ciphertext)

	if !equalSlices(decryptedFromExpected, plaintext) {
		t.Errorf("different plains. decryptedFromExpected(%d), plaintext(%d)", len(decryptedFromExpected), len(plaintext))
	}

	fmt.Printf("decryptedFromExpected ok\n")
}

func TestDecryption2(t *testing.T) {
	fmt.Printf("------------------ TestBasicEncryptionDecryption ------------------")

	secretKey := []uint64{0x02d65ac52, 0x1c6b45d1c, 0x1cb39041d, 0x0a114487b, 0x1bd58169e,
		0x06687bfc2, 0x0f2ca10ae, 0x08147165f, 0x145bd33c0, 0x1d93385c2,
		0x045108f23, 0x0d464ef68, 0x162009aed, 0x0bb4cf340, 0x0a963c1ee,
		0x08b633c3a, 0x13b1c1deb, 0x0275b464a, 0x170637204, 0x06b6f143c,
		0x14e2017d2, 0x13b9362c0, 0x099369b1a, 0x0381dcd7b, 0x09e4472db,
		0x12590d316, 0x139fbf37f, 0x13e35f2e8, 0x0ca7d4585, 0x1db99dd9a,
		0x094be46a2, 0x1ad06c1dd, 0x0bc081dab, 0x1b07b4ec2, 0x123f5d89d,
		0x10cee2d6e, 0x1dc263d6c, 0x1c3b3e526, 0x1ae8d01b2, 0x01d7a2071,
		0x1103f4ecc, 0x0cfbfdf86, 0x109d1fbd3, 0x13c50ac85, 0x0f5774d95,
		0x125d635b6, 0x0e064425a, 0x1b0448fbd, 0x01c514347, 0x103c917ad,
		0x1c26ea8ed, 0x059002810, 0x0fa25328b, 0x12b6e9cec, 0x0b4833bbc,
		0x09b81028c, 0x10bd4074a, 0x15c6d6d30, 0x0fda2fd14, 0x1818b77c5,
		0x0481c0638, 0x0223a184b, 0x0e899e472, 0x0db15d2d5, 0x10544a7f0,
		0x10a994c6f, 0x102e0c864, 0x133666b00, 0x05b41ee2b, 0x092cf7eec,
		0x157e5cba6, 0x1896cc763, 0x07879f5d9, 0x113411b28, 0x0d9006a3d,
		0x0b3aa1676, 0x12c2b492b, 0x08ef693b9, 0x19b5b200b, 0x09afe0f64,
		0x07514698d, 0x0e6dd8b29, 0x0cefd33f9, 0x024b8d2d4, 0x07d0d2edf,
		0x1b393e3b8, 0x10d92c1a9, 0x1cce4b9f9, 0x1bc38c79e, 0x0130fbfc6,
		0x13db89aaa, 0x1462d04cc, 0x12175c267, 0x0d6a1510c, 0x0dd64612e,
		0x10b292852, 0x12e6ce66c, 0x13c0a9642, 0x02e0cb677, 0x0c84fa99b,
		0x15812e819, 0x18b4e24d8, 0x1a4d7c750, 0x0ab3d94d3, 0x1c8064423,
		0x049375e2c, 0x1b2637a6d, 0x1644c75f4, 0x15efdf343, 0x0b2ef2066,
		0x00c8cca05, 0x0fcb1085a, 0x1a93d48fe, 0x00de317db, 0x0b74173d8,
		0x1a994f10f, 0x06738549a, 0x0100dca37, 0x0dd50e0e6, 0x1d773fbf3,
		0x1409b9e44, 0x043514748, 0x1bd640aae, 0x0848a36bd, 0x1d9be1ac9,
		0x0b4d29490, 0x19f46714b, 0x1add83450, 0x0f7351561, 0x0e8712cc6,
		0x1b4b20a68, 0x1b6b6b115, 0x0c83e8d78, 0x06ea0ec61, 0x0a54f1dc3,
		0x0fe95ca70, 0x19fc2ef5a, 0x0dc6cce6c, 0x068fb0701, 0x163133330,
		0x19184fabb, 0x1cbf6825c, 0x047cbf057, 0x1a6c7cfaf, 0x1936e87dc,
		0x06462fbc4, 0x1af988ac8, 0x1b285b998, 0x06c4b4e08, 0x130137dd4,
		0x01f05a977, 0x130c75cd6, 0x00a083787, 0x0537d9b83, 0x195dc94bf,
		0x00069d822, 0x062d88ae4, 0x0f0d4f3df, 0x1770c7e1e, 0x03edf347f,
		0x072c6c863, 0x175986f9a, 0x018f7edc0, 0x11f84fa37, 0x0bd25bd71,
		0x162393470, 0x10438585f, 0x08093bb0c, 0x106813829, 0x1a076e502,
		0x109f1e857, 0x1ab3b36f4, 0x00058e9e5, 0x1d1a005a7, 0x1d467ac31,
		0x1942e9dee, 0x1937c8cec, 0x148e414e4, 0x155be0476, 0x00db7a9b2,
		0x0494e79f4, 0x0297f2658, 0x0324fb049, 0x1842cd03c, 0x05681ddd7,
		0x10d6d3414, 0x0bad67d5c, 0x125e6095f, 0x1d2d03a89, 0x0ab867326,
		0x0af59db4e, 0x0a51ce8de, 0x0a44544e4, 0x073ebab3b, 0x0598957f6,
		0x06d37f469, 0x169c1f098, 0x1430cb1e5, 0x04baf5cbd, 0x02f39b481,
		0x196e53b01, 0x1cc261210, 0x0dac027d2, 0x09256ddaf, 0x0c01d5fcf,
		0x0c572bfed, 0x1d2ab209d, 0x0593dc6e1, 0x10afdf699, 0x0e5b8acca,
		0x0d57ee249, 0x05b9ebbd8, 0x1da1868d4, 0x14e12dc8c, 0x02011cca4,
		0x1546c7dca, 0x105247d0c, 0x1a0521d1b, 0x0d472b4e0, 0x133ff9223,
		0x1bc01169a, 0x06d2f5486, 0x099c149a4, 0x1c5e8c80d, 0x0339ee6e4,
		0x10b53583f, 0x12e50b01e, 0x0595fd54a, 0x0b923b738, 0x0809366a0,
		0x0c192d91c, 0x085d8fdf1, 0x1708a3cf9, 0x0f20f4d23, 0x094e780a2,
		0x148524d8e, 0x1a926e993, 0x04837f231, 0x1b7c0cb91, 0x0ee581d07,
		0x0e2f85adc, 0x1c3a4fcc9, 0x1852d298a, 0x053cb1abb, 0x180adbb1f,
		0x114da5af1, 0x08f6e58d0, 0x1a213e8fd, 0x14c8dc340, 0x185b0a047,
		0x10c37657d, 0x19f1f6c3d, 0x15bd1ced2, 0x178b6d3d0, 0x0db1595cc,
		0x0bb77980e}
	plaintext := []uint64{0x1a1b65740, 0x046fff878, 0x1a244787c, 0x19b9adc20, 0x1cb4417fa,
		0x079387978, 0x0efaefb7c, 0x189c025af, 0x1424aeb2e, 0x123f02976,
		0x1804ee8ee, 0x12063c49e, 0x029590584, 0x147c72676, 0x18c4253a3,
		0x1867281ad, 0x1df27d086, 0x0342bd954, 0x02457133e, 0x0de1d8873,
		0x11d1889be, 0x1165d19bc, 0x03b1950c2, 0x014d08f4b, 0x10bf9a614,
		0x127cfcedc, 0x02ecda103, 0x01a3058a3, 0x1e137301d, 0x07e390f18,
		0x078da5b0c, 0x0c27721bf, 0x083834220, 0x1970bdce4, 0x0c6a5755b,
		0x04e475346, 0x05f679931, 0x0172d452a, 0x0f1a4dc8e, 0x18775e168,
		0x19d628ccd, 0x064c41045, 0x05bbe6138, 0x0c5b0508b, 0x07bb6d0bf,
		0x00d467d03, 0x0baeb0692, 0x1cca0dbbd, 0x04b8b3e38, 0x0edbc9680,
		0x11295e84b, 0x163e2ce30, 0x170a0529d, 0x052392bb1, 0x08bd4c38b,
		0x05fe81fad, 0x152bdf2c5, 0x19081ab4e, 0x1130d6bdc, 0x094d5a837,
		0x0e194f235, 0x1c5fdc491, 0x09cbb8c36, 0x0296c387d, 0x008fc8573,
		0x0165e6962, 0x1db6be44f, 0x03e71a101, 0x02999adae, 0x101d125fa,
		0x07d13b25d, 0x027efa1e1, 0x110b3fb97, 0x16955552f, 0x0557de56e,
		0x10beda1c7, 0x12889efd5, 0x1387138a8, 0x03a715d2c, 0x1b93bc0b1,
		0x0237732e7, 0x11e1cf7e0, 0x11be7a5f0, 0x12adbfe99, 0x05915288f,
		0x00d403db9, 0x0f076fa5c, 0x11a0f03d6, 0x1dc4678c2, 0x19c030984,
		0x044078e08, 0x159f1bb35, 0x01549e211, 0x0ff01e821, 0x0cee93788,
		0x0e160179d, 0x10637a875, 0x1717f7c02, 0x0c90e4a27, 0x1a8c42d1d,
		0x00faa6c1f, 0x01dc36d0b, 0x1501664bc, 0x07bd5030f, 0x025501367,
		0x1aeabcc6b, 0x0da52bc85, 0x14bf2430e, 0x034c4591f, 0x0867e4e73,
		0x031fa2c1e, 0x1a459e731, 0x1b5b6719e, 0x1c8992b8f, 0x1daf9f2b0,
		0x089d0975f, 0x18ba93711, 0x17953e281, 0x161c66a72, 0x13cee6a6b,
		0x1893dcad2, 0x14800f497, 0x1cda13962, 0x1c8a89771, 0x0c19327b1,
		0x19b36ca83, 0x02a742bdf, 0x14f43dead}
	expectedCiphertext := []uint64{0x10ae630f6, 0x1b342593c, 0x1a22703a3, 0x11278da7e, 0x0b485f348,
		0x06a4c80be, 0x1b3884552, 0x0f609df0d, 0x0127dd394, 0x01f442434,
		0x083aa9d7e, 0x1e0a5397c, 0x11ff33a95, 0x0caa10205, 0x0dd55c747,
		0x0ebd5afc5, 0x0fb174004, 0x0d9fa8d9c, 0x03e7d8764, 0x1daffa094,
		0x0205a69d0, 0x10979fab7, 0x13e183f05, 0x164c6b7be, 0x1390b04ea,
		0x1b3417634, 0x1c23aa933, 0x19990c796, 0x1e18854e7, 0x192bef16e,
		0x0252e8c7e, 0x002b1ed1f, 0x1cc287958, 0x11ace733b, 0x0f60c703e,
		0x1ccd9e345, 0x072648d7b, 0x0544078c9, 0x0038482f0, 0x033a15f75,
		0x081495975, 0x01da043c4, 0x09837a1c7, 0x1106811b6, 0x0550eaf46,
		0x070c131fc, 0x0a1530b82, 0x041e14c3a, 0x1430d3547, 0x032e4d137,
		0x1d8ed2d74, 0x0e7a7db13, 0x089d9d53d, 0x00d2f97fb, 0x067a78cb5,
		0x122b28119, 0x034e63d08, 0x127aa0158, 0x1b08da8df, 0x0ec2f386b,
		0x037d0cd43, 0x13660b30b, 0x0dc89360c, 0x12fbaab4a, 0x069792c84,
		0x081933bd2, 0x1ce09ecc2, 0x032e0cf96, 0x119c0bc7f, 0x0332b4138,
		0x14e5ef752, 0x042e54bfc, 0x04773bf81, 0x180aa13bf, 0x02ba0e9fa,
		0x1d3efcaa3, 0x1de2d4876, 0x0fa5cfdcf, 0x1cb0a2e6a, 0x0a29612f9,
		0x06d2b8e9d, 0x1aa14bc16, 0x0896d9a4b, 0x1959b0e0d, 0x0a5b8d75f,
		0x05cdbc7c2, 0x10a4fbedd, 0x02ad71956, 0x17fb76a98, 0x0abf9fd6f,
		0x060e647bd, 0x13688bcf4, 0x025d023a4, 0x180b7747c, 0x0c381aca4,
		0x0893314d7, 0x1a5936d5f, 0x178b8b027, 0x19526a837, 0x0d2cbd140,
		0x05ba43672, 0x0abc51e47, 0x0403b248b, 0x14436893d, 0x0386e312a,
		0x0a4abcb30, 0x1a126867e, 0x13218a95f, 0x037e79cb0, 0x0526a9e21,
		0x116e88901, 0x073056820, 0x1acd0f21b, 0x045ebb687, 0x120202ea2,
		0x1b2bb4a5b, 0x180b50bf1, 0x06fda5911, 0x18c2cc9b1, 0x046cde940,
		0x05bd57ced, 0x1694e381d, 0x04e5da0c6, 0x0681d0549, 0x03037bb4d,
		0x00e62d01a, 0x14fb2137e, 0x0a9c2c126}
	modulus := 8088322049

	pa := NewPasta3(secretKey, uint64(modulus))

	fmt.Printf("decrypting ciphertext %d\n", expectedCiphertext)

	decrypted := pa.Decrypt(expectedCiphertext)

	fmt.Printf("decrypted ciphertext %d\n", decrypted)

	if !equalSlices(decrypted, plaintext) {
		t.Errorf("different plains. decrypted(%d), plaintext(%d)", len(decrypted), len(plaintext))
	}

	fmt.Printf("decrypted ok\n")
}

func equalSlices(a, b []uint64) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}
